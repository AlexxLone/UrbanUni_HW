# Дополнительное практическое задание по модулю: "Подробнее о функциях."
# Цель: Применить знания полученные в модуле, решив задачу повышенного уровня сложности
# Имеется некая структура данных с многократными вложениями данных различного типа.
# Что должно быть подсчитано:
# Все числа (не важно, являются они ключами или значениям или ещё чем-то).
# Все длинны строк (не важно, являются они ключами или значениям или ещё чем-то)
# Примечания (рекомендации):
# Весь подсчёт должен выполняться одним вызовом функции.
# Рекомендуется применить рекурсивный вызов функции, для каждой внутренней структуры.
# Т.к. каждая структура может содержать в себе ещё несколько элементов, можно использовать параметр *args
# Для определения типа данного используйте функцию isinstance.

def total_pile_sum(*args):  # рекурсивная функция подсчета суммы по условию здачи выше
    sum_tmp = 0
    for item in args:
        if isinstance(item, int) or isinstance(item, float):  # комплексные числа не включены в условие
            sum_tmp += item
        elif isinstance(item, str):
            sum_tmp += len(item)
        elif isinstance(item, list) or isinstance(item, tuple) or isinstance(item, set):
            sum_tmp += total_pile_sum(*item)
        elif isinstance(item, dict):
            sum_tmp += total_pile_sum(*item.items())
    return sum_tmp


data_structure = [
    [1, 2, 3],
    {'a': 4, 'b': 5},
    (6, {'cube': 7, 'drum': 8}),
    "Hello",
    ((), [{(2, 'Urban', ('Urban2', 35))}])
]

result = total_pile_sum(data_structure)
print(result)
