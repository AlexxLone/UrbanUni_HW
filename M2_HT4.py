# Цель: закрепить навык решения задач при помощи цикла for, применив знания об основных типах данных. Задача "Всё не
# так уж просто": Дан список чисел  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] Испольуя этот
# список составьте второй список primes содержащий только простые числа. А так же третий список not_primes,
# содержащий все не простые числа. Выведите списки primes и not_primes на экран(в консоль). Пункты задачи: Создайте
# пустые списки primes и not_primes. При помощи цикла for переберите список numbers. Напишите ещё один цикл for (
# вложенный), где будут подбираться делители для числа из 1ого цикла. Отметить простоту числа можно переменной
# is_prime, записав в неё занчение True перед проверкой. В процессе проверки на простоту записывайте числа из списка
# numbers в списки primes и not_primes в зависимости от значения перменной is_prime после проверки (True - в prime,
# False - в not_prime). Выведите списки primes и not_primes на экран(в консоль).
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
primes, not_primes = list(), list()
for item in numbers:  # перебор списка
    if item != 1:  # единица - исключительный случай
        # далее - цикл проверки на простоту
        # для оптимизации используем теорему о том, что наименьньший делитель числа "а" не превосходит корня из "а"
        is_prime = True
        for divisor in range(2, (int(item ** 0.5) + 1)):  # "+1" поскольку range не включает верхнюю границу диапазона
            if item % divisor == 0:
                is_prime = False
                not_primes.append(item)
                break  # найден делитель - прерываем цикл
        if is_prime:
            primes.append(item)  # делителя во вложенном цикле не найдено
print('Primes :', primes)
print('Not primes :', not_primes)
